#+TITLE: NOIRMACS
#+AUTHOR: Narmer Noir Bazile
#+EMAIL: narmernbazile@gmail.com
#+LANGUAGE: en

* whoami
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Narmer Noir Bazile"
        user-mail-address "narmernbazile@gmail.com")
#+END_SRC

* appearance
#+BEGIN_SRC emacs-lisp

    ;; minimal ui
    (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
    (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
    (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

    (setq inhibit-startup-message t)   ;; omit default startup screen
    (setq initial-scratch-message nil) ;; remove initial scratch buffer message

    ;; highlight current line and enable line and column numbers
    (when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
    (add-hook 'prog-mode-hook 'display-line-numbers-mode)
    (column-number-mode 1)

    (setq whitespace-style '(face tabs tab-mark trailing))
    (custom-set-faces
      '(whitespace-tab ((t (:foreground "#636363")))))
    (setq whitespace-display-mappings
      '((tab-mark 9 [124 9] [92 9]))) ; 124 is the ascii ID for '\|'
#+END_SRC

* behavior
#+BEGIN_SRC emacs-lisp
  ;; Keep emacs Custom-settings in separate file.
  (if (not (file-exists-p (expand-file-name "custom.el" user-emacs-directory)))
    (with-temp-file (expand-file-name "custom.el" user-emacs-directory)))
  (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)

  (setq visible-bell nil)              ;; disable terminal bell
  (delete-selection-mode 1)            ;; replace active region by typing
  (defalias 'yes-or-no-p 'y-or-n-p)    ;; skip typing out yes or no
  (setq make-backup-files nil)         ;; don't create backup files

  (setq locale-coding-system   'utf-8) ;; set UTF-8 encoding as default
  (set-terminal-coding-system  'utf-8)
  (set-keyboard-coding-system  'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system        'utf-8)

  ;; auto-close brackets, parenthesis, and double quotes
  (setq electric-pair-pairs '((?\( . ?\))
                              (?\[ . ?\[)
                              (?\{ . ?\})
                              (?\" . ?\")))
  (electric-pair-mode t)

  ;; word wrap
  (setq-default fill-column 80)     ;; wrap lines at standard 80 characters
  (setq-default truncate-lines nil) ;; nil for wrap, t for no wrap
  (global-visual-line-mode 1)

  ;; whitespace
  ;; (setq-default 'sentence-end-double-space nil) ;; period + space = sentence
  ;; (setq-default 'indent-tabs-mode nil)          ;; never use tabs by default
  ;; (setq tab-width 2)                           ;; 1 tab = 2 spaces
  ;; (defvaralias 'c-basic-offset 'tab-width)
  ;; (defvaralias 'cperl-indent-level 'tab-width)

  ;; whitespace
  (setq custom-tab-width 2)

  (defun disable-tabs () (setq indent-tabs-mode nil))
  (defun enable-tabs  ()
    (local-set-key (kbd "TAB") 'tab-to-tab-stop)
    (setq indent-tabs-mode t)
    (setq tab-width custom-tab-width))

  (add-hook 'prog-mode-hook 'disable-tabs)
  (setq-default eletric-indent-inhibit t)
  (setq backward-delete-char-untabify-method 'hungry)
  (global-whitespace-mode) ; Enable whitespace mode everywhere

#+END_SRC

* packages
#+begin_src emacs-lisp

  ;; configure package sources
  (require 'package)
  (setq package-enable-at-startup nil)
  (setq package-archives '(("org"   . "http://orgmode.org/elpa/")
                           ("gnu"   . "http://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)

  ;; bootstrap =use-package=
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)

#+end_src


* evil
#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :config (evil-mode 1))

(use-package evil-commentary
  :ensure t
  :diminish t
  :config (evil-commentary-mode))

(use-package evil-surround
  :ensure t
  :diminish evil-surround-mode
  :config (global-evil-surround-mode 1))
#+end_src

* icons and themes
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config (load-theme 'doom-one-light t))

(use-package all-the-icons :ensure t)
#+end_src

* modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :requires all-the-icons
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-major-mode-color-icon nil)
  (setq doom-modeline-major-mode-icon nil)
  (setq doom-modeline-minor-modes t))

(use-package diminish
  :ensure t
  :init 
  (diminish 'which-key-mode)
  ;; required because flyspell is loaded with a hook rather than at startup
  (with-eval-after-load "flyspell" (diminish 'flyspell-mode))
  (with-eval-after-load "flyspell" (diminish 'flyspell-prog-mode)))

(use-package minions
  :ensure t
  :config (minions-mode 1))
#+end_src

* completion
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :init (vertico-mode))
#+end_src

* treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :config
    (setq   treemacs-follow-after-init          t
	    treemacs-width                      35
	    treemacs-indentation                2
	    treemacs-space-between-root-nodes   nil
	    treemacs-read-string-input          'from-child-frame
	    treemacs-show-hidden-files          t
	    treemacs-never-persist              nil
	    treemacs-goto-tag-strategy          'refetch-index))

(use-package treemacs-all-the-icons
  :ensure t
  :config
  (treemacs-load-theme "all-the-icons"))
#+end_src

* lsp | dap mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :hook ((c-mode          ; clangd
	    c++-mode        ; clangd
	    c-or-c++-mode   ; clangd
	    java-mode       ; eclipse-jdtls
	    js-mode         ; ts-ls (tsserver wrapper)
	    js-jsx-mode     ; ts-ls (tsserver wrapper)
	    typescript-mode ; ts-ls (tsserver wrapper)
	    python-mode     ; pyright
	    web-mode        ; ts-ls/HTML/CSS
	    haskell-mode    ; haskell-language-server
	    ) . lsp-deferred)
    :commands lsp
    :config
    (setq lsp-auto-guess-root t)
    (setq lsp-log-io nil)
    (setq lsp-restart 'auto-restart)
    (setq lsp-enable-symbol-highlighting nil)
    (setq lsp-enable-on-type-formatting nil)
    (setq lsp-signature-auto-activate nil)
    (setq lsp-signature-render-documentation nil)
    (setq lsp-eldoc-hook nil)
    (setq lsp-modeline-code-actions-enable nil)
    (setq lsp-modeline-diagnostics-enable nil)
    (setq lsp-headerline-breadcrumb-enable nil)
    (setq lsp-semantic-tokens-enable nil)
    (setq lsp-enable-folding nil)
    (setq lsp-enable-imenu nil)
    (setq lsp-enable-snippet nil)
    (setq read-process-output-max (* 1024 1024)) ;; 1MB
    (setq lsp-idle-delay 0.5))

  (use-package lsp-ui
      :ensure t
      :commands lsp-ui-mode
      :config
      (setq lsp-ui-doc-enable nil)
      (setq lsp-ui-doc-header t)
      (setq lsp-ui-doc-include-signature t)
      (setq lsp-ui-doc-border (face-foreground 'default))
      (setq lsp-ui-sideline-show-code-actions t)
      (setq lsp-ui-sideline-delay 0.05)
      (setq lsp-headerline-breadcrumb-icons-enable nil)
      (setq lsp-headerline-breadcrumb-enable nil))

  (use-package lsp-treemacs
      :ensure t
      :config (setq lsp-treemacs-theme nil)
      :commands lsp-treemacs-errors-list)
  ;; (use-package dap-mode     :ensure t)
  ;; (use-package which-key    :ensure t :config (which-key-mode))
#+end_src

* c/c++
#+begin_src emacs-lisp

#+end_src

* python
#+begin_src emacs-lisp
  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda () (require 'lsp-pyright)))
    :init (when (executable-find "python3")
          (setq lsp-pyright-python-executable-cmd "python3")))
  (setq-default python-indent-offset 4)
#+end_src

* lisp
#+begin_src emacs-lisp
  (setq lisp-indent-offset 2)
#+end_src

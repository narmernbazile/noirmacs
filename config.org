
#+TITLE:    NOIRMACS
#+AUTHOR:   Narmer Noir Bazile
#+EMAIL:    narmernbazile@gmail.com
#+LANGUAGE: en
#+STARTUP:  overview
#+PROPERTY: header-args :tangle yes :results silent


* whoami
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Narmer Noir Bazile"
        user-mail-address "narmernbazile@gmail.com")
#+END_SRC

* environment
#+begin_src emacs-lisp
  (when (eq system-type 'windows-nt)
   (progn
   (setq chocolatey-root "c:/ProgramData/chocolatey")
   (setq chocolatey-bin
         (concat chocolatey-root "/" "bin"))))
#+end_src
* appearance
#+BEGIN_SRC emacs-lisp

    ;; minimal ui
    (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
    (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
    (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

    (setq inhibit-startup-message t)   ;; omit default startup screen
    (setq initial-scratch-message nil) ;; remove initial scratch buffer message

    ;; highlight current line and enable line and column numbers
    (when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
    (add-hook 'prog-mode-hook 'display-line-numbers-mode)
    (column-number-mode 1)

#+END_SRC

* behavior
#+BEGIN_SRC emacs-lisp
   ;; Keep emacs Custom-settings in separate file.
   (if (not (file-exists-p (expand-file-name "custom.el" user-emacs-directory)))
     (with-temp-file (expand-file-name "custom.el" user-emacs-directory)))
   (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
   (load custom-file)

   (setq visible-bell t)              ;; disable terminal bell
   (delete-selection-mode 1)            ;; replace active region by typing
   (defalias 'yes-or-no-p 'y-or-n-p)    ;; skip typing out yes or no
   (setq make-backup-files nil)         ;; don't create backup files

   (setq locale-coding-system   'utf-8) ;; set UTF-8 encoding as default
   (set-terminal-coding-system  'utf-8)
   (set-keyboard-coding-system  'utf-8)
   (set-selection-coding-system 'utf-8)
   (prefer-coding-system        'utf-8)

   ;; auto-close brackets, parenthesis, and double quotes
   (setq electric-pair-pairs '((?\( . ?\))
                               (?\[ . ?\])
                               (?\{ . ?\})
                               (?\" . ?\")))
   (electric-pair-mode t)

   ;; word wrap
   (setq-default fill-column 80)     ;; wrap lines at standard 80 characters
   (setq-default truncate-lines nil) ;; nil for wrap, t for no wrap
   (global-visual-line-mode 1)

   ;; configuration for flyspell on windows
   (cond ((string-equal system-type "windows-nt")
     (progn (setq ispell-program-name
       (concat chocolatey-bin "/" "hunspell.exe")))))

  ;; default windows font is hideous
  (when (eq system-type 'windows-nt)
    (set-face-attribute 'default nil :family "Consolas" :height 100 :width 'normal))
#+END_SRC
* functions
** toggle-window-split
#+begin_src emacs-lisp
  (defun toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
           (next-win-buffer (window-buffer (next-window)))
           (this-win-edges (window-edges (selected-window)))
           (next-win-edges (window-edges (next-window)))
           (this-win-2nd (not (and (<= (car this-win-edges)
                       (car next-win-edges))
                       (<= (cadr this-win-edges)
                       (cadr next-win-edges)))))
           (splitter
            (if (= (car this-win-edges)
               (car (window-edges (next-window))))
            'split-window-horizontally
          'split-window-vertically)))
      (delete-other-windows)
      (let ((first-win (selected-window)))
        (funcall splitter)
        (if this-win-2nd (other-window 1))
        (set-window-buffer (selected-window) this-win-buffer)
        (set-window-buffer (next-window) next-win-buffer)
        (select-window first-win)
        (if this-win-2nd (other-window 1))))))

  (global-set-key (kbd "C-x |") 'toggle-window-split)
#+end_src
** better org-return
- [[https://kitchingroup.cheme.cmu.edu/blog/2017/04/09/A-better-return-in-org-mode/][source]]
#+begin_src emacs-lisp
  ;; (require 'org-inlinetask)

  ;; (defun scimax/org-return (&optional ignore)
  ;;   "Add new list item, heading or table row with RET.
  ;; A double return on an empty element deletes it.
  ;; Use a prefix arg to get regular RET. "
  ;;   (interactive "P")
  ;;   (if ignore
  ;;       (org-return)
  ;;     (cond

  ;;      ((eq 'line-break (car (org-element-context)))
  ;;       (org-return-indent))

  ;;      ;; Open links like usual, unless point is at the end of a line.
  ;;      ;; and if at beginning of line, just press enter.
  ;;      ((or (and (eq 'link (car (org-element-context))) (not (eolp)))
  ;;           (bolp))
  ;;       (org-return))

  ;;      ;; It doesn't make sense to add headings in inline tasks. Thanks Anders
  ;;      ;; Johansson!
  ;;      ((org-inlinetask-in-task-p)
  ;;       (org-return))

  ;;      ;; checkboxes too
  ;;      ((org-at-item-checkbox-p)
  ;;       (org-insert-todo-heading nil))

  ;;      ;; lists end with two blank lines, so we need to make sure we are also not
  ;;      ;; at the beginning of a line to avoid a loop where a new entry gets
  ;;      ;; created with only one blank line.
  ;;      ((org-in-item-p)
  ;;       (if (save-excursion (beginning-of-line) (org-element-property :contents-begin (org-element-context)))
  ;;           (org-insert-heading)
  ;;         (beginning-of-line)
  ;;         (delete-region (line-beginning-position) (line-end-position))
  ;;         (org-return)))

  ;;      ;; org-heading
  ;;      ((org-at-heading-p)
  ;;       (if (not (string= "" (org-element-property :title (org-element-context))))
  ;;           (progn (org-end-of-meta-data)
  ;;                  (org-insert-heading-respect-content)
  ;;                  (outline-show-entry))
  ;;         (beginning-of-line)
  ;;         (setf (buffer-substring
  ;;                (line-beginning-position) (line-end-position)) "")))

  ;;      ;; tables
  ;;      ((org-at-table-p)
  ;;       (if (-any?
  ;;            (lambda (x) (not (string= "" x)))
  ;;            (nth
  ;;             (- (org-table-current-dline) 1)
  ;;             (org-table-to-lisp)))
  ;;           (org-return)
  ;;         ;; empty row
  ;;         (beginning-of-line)
  ;;         (setf (buffer-substring
  ;;                (line-beginning-position) (line-end-position)) "")
  ;;         (org-return)))

  ;;      ;; fall-through case
  ;;      (t
  ;;       (org-return)))))

  ;; (define-key org-mode-map (kbd "RET")
  ;;   'scimax/org-return)

#+end_src
* package setup
#+begin_src emacs-lisp

  ;; configure package sources
  (require 'package)
  (setq package-enable-at-startup nil)
  (setq package-archives '(("org"   . "http://orgmode.org/elpa/")
                           ("gnu"   . "http://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)

  ;; bootstrap =use-package=
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)

#+end_src
* ui packages 
** icons and themes
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config (load-theme 'doom-one-light t))

(use-package all-the-icons :ensure t)
#+end_src

** modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :requires all-the-icons
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-major-mode-color-icon nil)
  (setq doom-modeline-major-mode-icon nil)
  (setq doom-modeline-minor-modes t))

(use-package diminish
  :ensure t
  :init
  (diminish 'which-key-mode)
  ;; required because flyspell is loaded with a hook rather than at startup
  (with-eval-after-load "flyspell" (diminish 'flyspell-mode))
  (with-eval-after-load "flyspell" (diminish 'flyspell-prog-mode)))

(use-package minions
  :ensure t
  :config (minions-mode 1))
#+end_src

** solaire
#+begin_src emacs-lisp
  (use-package solaire-mode
    :ensure t
    :hook (after-init . solaire-global-mode)
    :config
    (push '(treemacs-window-background-face . solaire-default-face) solaire-mode-remap-alist)
    (push '(treemacs-hl-line-face . solaire-hl-line-face) solaire-mode-remap-alist))
#+end_src
** completion
#+begin_src emacs-lisp

  (use-package vertico
    :ensure t
    :init
    (vertico-mode)
    :custom
    (vertico-count 13))

  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode))

#+end_src

* keybinding packages
** evil
#+begin_src emacs-lisp
<<<<<<< Updated upstream
(use-package evil
  :ensure t
  :config (evil-mode 1))

(use-package evil-commentary
  :ensure t
  :diminish t
  :config (evil-commentary-mode))

(use-package evil-surround
  :ensure t
  :diminish evil-surround-mode
  :config (global-evil-surround-mode 1))
=======
  ;; (use-package company
  ;;   :ensure t
  ;;   :config
  ;;   (add-hook 'prog-mode-hook 'global-company-mode))
>>>>>>> Stashed changes
#+end_src

** general.el | which-key
#+begin_src emacs-lisp
  
  (use-package general
    :ensure t
    :config
    (general-evil-setup t)

    ;;   (general-create-definer noir/leader-keys
    ;;     :keymaps '(normal insert visual emacs)
    ;;     :prefix "SPC"
    ;;     :global-prefix "C-SPC"))

    ;; (noir/leader-keys
    ;;   "t"  '(:ignore t :which-key "toggles")
    ;;   "tt" '(counsel-load-theme :which-key "choose theme"))

    ;; Set up leader key with general.el
    (general-create-definer noir/leader    :prefix "SPC")

    (noir/leader
    :keymaps 'normal
    "TAB" '(mode-line-other-buffer   :which-key "last-buffer")
    "SPC" '(execute-extended-command :which-key "M-x:")
    "."   '(find-file                :which-key "find-file")

    "o"  '(:ignore t :which-key "open")
    "oe" '(eshell    :which-key "eshell")

    "q"  '(:ignore t              :which-key "quit")
    "qR" '(restart-emacs          :which-key "restart-emacs")

    "p"  '(projectile-command-map :which-key "projectile")))

    ;; Example: Adding projectile-compile-project to leader key
    ;; (my-leader-def
    ;; :keymaps 'normal
    ;; "pc" '(projectile-compile-project :which-key "Compile Project"))

    ;; ;; Example: Adding projectile-run-shell-command to leader key
    ;; (my-leader-def
    ;; :keymaps 'normal
    ;; "ps" '(projectile-run-shell-command :which-key "Run Shell Command in Project")))

  (use-package which-key    :ensure t :config (which-key-mode))

#+end_src

* ORG MODE
** org
#+begin_src emacs-lisp
  ;;(use-package org-modern
  ;;    :ensure t
  ;;:config
  ;;(with-eval-after-load 'org (global-org-modern-mode)))

  (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)

  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-mode-hook 'flyspell-mode)

  (setq org-log-done t)

  ;; org-agenda 
  (setq org-agenda-files (list "~/usr/org/todo.org"))
  (setq org-default-notes-file "~/usr/org/todo.org")
  ;;(add-to-list 'org-capture-templates
  ;;             '("t" "task"  entry
  ;;               (file org-default-notes-file)
  ;;                "* TODO %?" :empty-lines 1))

  ;; (setq org-capture-templates
  ;;       '(("t" "todo" entry (file org-default-notes-file) 
  ;;          "* TODO %?\n  %i\n  %a")
  ;;         ("j" "Journal" entry (file+datetree "~/org/journal.org")
  ;;           "* %?\nEntered on %U\n  %i\n  %a")
  ;; 	("n" "note" entry)))

  ;; disable exporting of table of contents when exporting to pdf via latex
  (setq org-latex-toc-command "")
  (setq org-export-global-macros '(("toc" . "")))
  (setq org-latex-custom-id-as-label nil)

#+end_src

** org-babel
#+begin_src emacs-lisp
  (use-package org-babel
    :no-require
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
      '((python   . t)
        (haskell  . t))))
#+end_src

** org-roam
#+begin_src emacs-lisp
  (use-package org-roam
   :ensure t
   :init
   (setq org-roam-v2-ack t)
   :custom
   (org-roam-directory "~/usr/nts")
   (org-roam-completion-everywhere t)
   (setq org-roam-dailies-capture-templates
      '(("d" "default" plain
         "%?"
         :target (file+head "%<%Y-%m>.org" "#+TITLE: %<%Y-%m>\n"))))
   :bind (("C-c n l" . org-roam-buffer-toggle)
          ("C-c n f" . org-roam-node-find)
          ("C-c n i" . org-roam-node-insert)
          :map org-mode-map
          ("C-M-i" . completion-at-point)
          :map org-roam-dailies-map
          ("Y" . org-roam-dailies-capture-yesterday)
          ("T" . org-roam-dailies-capture-tomorrow))
   :bind-keymap
   ("C-c n d" . org-roam-dailies-map)
   :config
   (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode))

  (use-package org-roam-ui
    ;; :straight
      ;; (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
      :ensure t
      :after org-roam
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
      :config
      (setq org-roam-ui-sync-theme t
            org-roam-ui-follow t
            org-roam-ui-update-on-save t
            org-roam-ui-open-on-start t))
#+end_src

#+RESULTS:
: t

** org-kanban
#+begin_src emacs-lisp
  (use-package org-kanban :ensure t)
#+end_src

** org-capture
#+begin_src emacs-lisp
  (defun transform-square-brackets-to-round-ones(string-to-transform)
    "Transforms [ into ( and ] into ), other chars left unchanged."
    (concat 
    (mapcar #'(lambda (c) (if (equal c ?[) ?\( (if (equal c ?]) ?\) c))) string-to-transform)))

  (setq org-capture-templates `(
          ("p" "Protocol" entry (file+headline ,(concat org-directory "notes.org") "Inbox")
          "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")	
          ("L" "Protocol Link" entry (file+headline ,(concat org-directory "notes.org") "Inbox")
          "* %? [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n")))

  (global-set-key (kbd "C-c c") 'org-capture)
#+end_src

** org-protocol
#+begin_src emacs-lisp
  (require 'org-protocol)
#+end_src

* Language configuration
** lisp
#+begin_src emacs-lisp
  (setq lisp-indent-offset 2)
#+end_src

** haskell
#+begin_src emacs-lisp
  (use-package haskell-mode
    :ensure t
    :mode "\\.hs\\'"
    :hook (haskell-mode . turn-on-haskell-indent))
#+end_src
** latex
#+begin_src emacs-lisp
  ;; (use-package auctex
  ;;   :ensure t
  ;;   :defer t
  ;;   :config
  ;;   (require 'pdf-tools)
  ;;   (setq TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view)))
  ;;   (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
  ;;   (setq TeX-save-query nil)
  ;;   (setq TeX-auto-save t)
  ;;   (add-hook 'TeX-mode-hook 'outline-minor-mode))

  (use-package latex
    :ensure auctex
    :hook ((LaTeX-mode . prettify-symbols-mode))
    :bind (:map LaTeX-mode-map
           ("C-S-e" . latex-math-from-calc))
    :config
    ;; Format math as a Latex string with Calc
    (defun latex-math-from-calc ()
      "Evaluate `calc' on the contents of line at point."
      (interactive)
      (cond ((region-active-p)
             (let* ((beg (region-beginning))
                    (end (region-end))
                    (string (buffer-substring-no-properties beg end)))
               (kill-region beg end)
               (insert (calc-eval `(,string calc-language latex
                                            calc-prefer-frac t
                                            calc-angle-mode rad)))))
            (t (let ((l (thing-at-point 'line)))
                 (end-of-line 1) (kill-line 0) 
                 (insert (calc-eval `(,l
                                      calc-language latex
                                      calc-prefer-frac t
                                      calc-angle-mode rad))))))))

  (use-package cdlatex
    :ensure t
    :hook (LaTeX-mode . turn-on-cdlatex)
    :bind (:map cdlatex-mode-map 
                ("<tab>" . cdlatex-tab)))


#+end_src

** ledger-mode
#+begin_src emacs-lisp
  (use-package ledger-mode :ensure t)
#+end_src

** yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src

* Applications
** erc
#+begin_src emacs-lisp
  (setq erc-server "irc.libera.chat"
        erc-nick "noir2002"
        erc-user-full-name "Narmer Noir Bazile"
        erc-track-shorten-start 8
        erc-autojoin-channels-alist '(("irc.libera.chat" "#emacs"))
        erc-kill-buffer-on-part t
              erc-auto-query 'bury)
#+end_src

** denote
#+begin_src emacs-lisp
  (use-package denote
    :ensure )
#+end_src

** nov.el
#+begin_src emacs-lisp
  (use-package nov
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
    (when (or (eq system-type 'gnu/linux)
              (eq system-type 'darwin))
      (defun my-nov-font-setup ()
        (face-remap-add-relative 'variable-pitch :family "Linux Libertine O"
                                                 :height 1.5))
      (add-hook 'nov-mode-hook 'my-nov-font-setup)))
#+end_src

** pdf-tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t
    :mode ("\.pdf\'" . pdf-view-mode)
    :config
    (pdf-tools-install))

#+end_src

* IDE packages
** projectile
#+begin_src emacs-lisp
  (use-package projectile :ensure t)
  (use-package treemacs-projectile :after (treemacs projectile) :ensure t)
#+end_src

** autocompletion
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'global-company-mode))
#+end_src

** treemacs
#+begin_src emacs-lisp
    (use-package treemacs
      :ensure t
      :bind ("C-c t" . treemacs)
      :custom
      (treemacs-is-never-other-window t)

      :hook
      (treemacs-mode . treemacs-project-follow-mode))

  (use-package treemacs-all-the-icons
    :ensure t
    :config
    (treemacs-load-theme "all-the-icons"))

#+end_src

** eglot (language server) & dape (debugger)
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    ;; :config
    ;; (setq eglot-report-progress nil)

    :hook
    (python-mode . eglot-ensure)
    (haskell-mode . eglot-ensure)

    :bind
    (("<f7>" . dape-step-in)
     ("<f8>" . dape-next)
     ("<f9>" . dape-continue)))

  (use-package dape
    :after elgot)
#+end_src

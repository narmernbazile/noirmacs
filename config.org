#+TITLE:    NOIRMACS
#+AUTHOR:   Narmer Noir Bazile
#+EMAIL:    narmernbazile@gmail.com
#+LANGUAGE: en
#+STARTUP:  overview
#+PROPERTY: header-args :tangle yes :results silent
TODO: avy, consult, embark, wgrep?

* early init
#+begin_src emacs-lisp
  (tool-bar-mode -1) ;; All these tools are in the menu-bar anyway

  ;; Default frame configuration
  (setq frame-resize-pixelwise t)
  ;;(setq default-frame-alist '((fullscreen . maximized)
  ;;
  ;;			     ;; You can turn off scroll bars by uncommenting these lines:
  ;;			     ;; (vertical-scroll-bars . nil)
  ;;			     ;; (horizontal-scroll-bars . nil)
  ;;
  ;;			     ;; Setting the face in here prevents flashes of
  ;;			     ;; color as the theme gets activated
  ;;			     (background-color . "#000000")
  ;;			     (ns-appearance . dark)
  ;;			     (ns-transparent-titlebar . t)))
  ;;
#+end_src

* init
** Basic settings
#+begin_src emacs-lisp

  ;; Keep emacs Custom-settings in separate file.
  (if (not (file-exists-p (expand-file-name "custom.el" user-emacs-directory)))
    (with-temp-file (expand-file-name "custom.el" user-emacs-directory)))
    (setq-default custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)


  (setopt initial-major-mode 'fundamental-mode)          ;; default mode for the *scratch* buffer
  (savehist-mode)                                        ;; save history of minibuffer
  (windmove-default-keybindings 'control)                ;; Move through windows with Ctrl-<arrow keys>
  (setopt sentence-end-double-space nil)                 ;; Fix archaic defaults
  (setq make-backup-files nil)                           ;; Disable backup files
  (setq backup-directory-alist  '((".*" . "~/.Trash"))) 

  (setq visible-bell t)                                  ;; disable terminal bell
  (delete-selection-mode 1)                              ;; replace active region by typing
  (defalias 'yes-or-no-p 'y-or-n-p)                      ;; skip typing out yes or no

  (setq locale-coding-system   'utf-8) ;; set UTF-8 encoding as default
  (set-terminal-coding-system  'utf-8)
  (set-keyboard-coding-system  'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system        'utf-8)
  
#+end_src
** Package settings
#+begin_src emacs-lisp
  ;; Package setup
  ;;(with-eval-after-load 'package
  ;;(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))

  ;; configure package sources
  (require 'package)
  (setq package-enable-at-startup nil)
  (setq package-archives '(;;("org"   . "http://orgmode.org/elpa/")
			   ("gnu"   . "http://elpa.gnu.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)

  ;; bootstrap =use-package=
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
#+end_src
** Interface enhancements/defaults
#+begin_src emacs-lisp
  ;; Mode line information
  (setopt line-number-mode t)                           ;; Show current line in modeline
  (setopt column-number-mode t)                         ;; Show column as well

  ;; Enable horizontal scrolling
  (setopt mouse-wheel-tilt-scroll t)
  (setopt mouse-wheel-flip-direction t)

  ;; Display line numbers in programming mode
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (setopt display-line-numbers-width 3)                 ;; Set a minimum width

  ;; Nice line wrapping when working with text
  (add-hook 'text-mode-hook 'visual-line-mode)          ;; enable word-wrapping for text and programming modes
  (setq-default fill-column 80)                         ;; wrap lines at standard 80 characters
  (setq-default truncate-lines nil)                     ;; nil for wrap, t for no wrap

  ;; Modes to highlight the current line with
  (let ((hl-line-hooks '(text-mode-hook prog-mode-hook)))
    (mapc (lambda (hook) (add-hook hook 'hl-line-mode)) hl-line-hooks))

  ;; Misc. UI tweaks
  ;;(blink-cursor-mode -1)                                ; Steady cursor
  (pixel-scroll-precision-mode)                         ; Smooth scrolling

#+end_src
** Text editing settings
#+begin_src emacs-lisp
  ;; auto-close parentheses, brackets, and quotes in programming modes
  (use-package electric
    :hook (prog-mode . electric-pair-mode)
    :init
    (setq electric-pair-pairs '((?\( . ?\))
				(?\[ . ?\])
				(?\{ . ?\})
				(?\" . ?\"))))

  ;; We won't set these, but they're good to know about
  ;; (setopt indent-tabs-mode nil)
  ;; (setopt tab-width 4)
#+end_src
** Icons, themes, and fonts
#+begin_src emacs-lisp
  ;;(use-package emacs
  ;;  :config
  ;;  (load-theme 'modus-vivendi))          ; for light theme, use modus-operandi

  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one-light t))

  (use-package all-the-icons
    :ensure t)
#+end_src

** Discovery aids
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+end_src
** Minibuffer/completion settings
#+begin_src emacs-lisp
  ;; For help, see: https://www.masteringemacs.org/article/understanding-minibuffer-completion

  (setopt enable-recursive-minibuffers t)                ; Use the minibuffer whilst in the minibuffer
  (setopt completion-cycle-threshold 1)                  ; TAB cycles candidates
  (setopt completions-detailed t)                        ; Show annotations
  (setopt tab-always-indent 'complete)                   ; When I hit TAB, try to complete, otherwise, indent
  (setopt completion-styles '(basic initials substring)) ; Different styles to match input to candidates

  (setopt completion-auto-help 'always)                  ; Open completion always; `lazy' another option
  (setopt completions-max-height 20)                     ; This is arbitrary
  (setopt completions-detailed t)
  (setopt completions-format 'one-column)
  (setopt completions-group t)
  (setopt completion-auto-select 'second-tab)            ; Much more eager
  ;(setopt completion-auto-select t)                     ; See `C-h v completion-auto-select' for more possible values

  (keymap-set minibuffer-mode-map "TAB" 'minibuffer-complete) ; TAB acts more like how it does in the shell
#+end_src
** Minibuffer/completion packages
#+begin_src emacs-lisp
  ;; Vertico: better vertical completion for minibuffer commands
  (use-package vertico
    :ensure t
    :init
    ;; You'll want to make sure that e.g. fido-mode isn't enabled
    (vertico-mode))

  (use-package vertico-directory
    :after vertico
    :bind (:map vertico-map
                ;; make backspace key delete entire directory
                ("DEL" . vertico-directory-delete-word)))

  ;; Marginalia: annotations for minibuffer
  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode))

  ;; Orderless: powerful completion style
  (use-package orderless
    :ensure t
    :config
    (setq completion-styles '(orderless)))

  ;; Popup completion-at-point
  (use-package corfu
    :ensure t
    :init
    (global-corfu-mode)
    :bind
    (:map corfu-map
          ("SPC" . corfu-insert-separator)
          ("C-n" . corfu-next)
          ("C-p" . corfu-previous))
    :custom
    (corfu-auto t) ;; Enable auto completion
    (corfu-cycle t) ;; Allow cycling through suggestions
    (corfu-preview-current nil) ;; Disable preview of the current candidate
    (corfu-auto-prefix 2) ;; Minimum prefix length for auto completion
    (corfu-auto-delay 0.2)) ;; Delay in seconds before suggestions pop up

  ;; Part of corfu
  (use-package corfu-popupinfo
    :after corfu
    :hook (corfu-mode . corfu-popupinfo-mode)
    :custom
    (corfu-popupinfo-delay '(0.25 . 0.1))
    (corfu-popupinfo-hide nil)
    :config
    (corfu-popupinfo-mode))

  ;; Make corfu popup come up in terminal overlay
  (use-package corfu-terminal
    :if (not (display-graphic-p))
    :ensure t
    :config
    (corfu-terminal-mode))

  ;; Fancy completion-at-point functions; there's too much in the cape package to
  ;; configure here; dive in when you're comfortable!
  (use-package cape
    :ensure t
    :init
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-symbol) ;; Symbol completion
    (add-to-list 'completion-at-point-functions #'cape-file))

  ;; Pretty icons for corfu
  (use-package kind-icon
    :if (display-graphic-p)
    :ensure t
    :after corfu
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))

#+end_src
** Modeline packages
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :requires all-the-icons
    :config
    (setq doom-modeline-major-mode-color-icon nil)
    (setq doom-modeline-major-mode-icon nil)
    (setq doom-modeline-minor-modes t)
    (doom-modeline-mode 1))

  (use-package diminish
    :ensure t
    :init
    (diminish 'which-key-mode)
    ;; required because flyspell is loaded with a hook rather than at startup
    (with-eval-after-load "flyspell" (diminish 'flyspell-mode))
    (with-eval-after-load "flyspell" (diminish 'flyspell-prog-mode)))

  (use-package minions
    :ensure t
    :config (minions-mode 1))
#+end_src
** Tab-bar configuration
#+begin_src emacs-lisp
  ;; Show the tab-bar as soon as tab-bar functions are invoked
  (setopt tab-bar-show 1)
#+end_src
** Development configuration
#+begin_src emacs-lisp
  ;; common file types
  (use-package markdown-mode :hook ((markdown-mode . visual-line-mode)))
  (use-package yaml-mode :ensure t)
  (use-package json-mode :ensure t)


  ;; Treesitter config

  ;; Tell Emacs to prefer the treesitter mode
  ;; You'll want to run the command `M-x treesit-install-language-grammar' before editing.
  (setq major-mode-remap-alist
	'((yaml-mode . yaml-ts-mode)
	  (bash-mode . bash-ts-mode)
	  (js2-mode . js-ts-mode)
	  (typescript-mode . typescript-ts-mode)
	  (json-mode . json-ts-mode)
	  (css-mode . css-ts-mode)
	  (python-mode . python-ts-mode)))


  ;; Eglot, the built-in LSP client for Emacs

  (use-package eglot
  ;; no :ensure t here because it's built-in

  ;; Configure hooks to automatically turn-on eglot for selected modes
  :hook ((python-ts-mode . eglot-ensure)
         (c-mode         . eglot-ensure)
         (c++-mode       . eglot-ensure))

  ;;:custom
  ;;(eglot-send-changes-idle-time 0.1)
  ;;(eglot-extend-to-xref t)              ; activate Eglot in referenced non-project files

  :config
  ;;(fset #'jsonrpc--log-event #'ignore)  ; massive perf boost---don't log every event
  ;; Sometimes you need to tell Eglot where to find the language server
  ; (add-to-list 'eglot-server-programs
  ;              '(haskell-mode . ("haskell-language-server-wrapper" "--lsp")))
  )

#+end_src
** Evil-mode configuration
#+begin_src emacs-lisp
  ;; Evil: vi emulation
  (use-package evil
    :ensure t

    :init
    (setq evil-respect-visual-line-mode t)
    (setq evil-undo-system 'undo-redo)
    (setq evil-want-C-i-jump nil) ;; DONT TOUCH THIS: need to fix broken tab functionality
    ;; Enable this if you want C-u to scroll up, more like pure Vim
    ;(setq evil-want-C-u-scroll t)

    ;; Set default state to Emacs state for all modes
    (setq evil-default-state 'emacs)

    :config
    ;;(evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
    (evil-mode 1)

    ;; Configuring initial major mode for some modes
    (evil-set-initial-state 'text-mode 'normal)
    (evil-set-initial-state 'prog-mode 'normal))

#+end_src
** Org-mode configuration
*** general
#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :hook
    (org-mode . org-indent-mode)
    (org-mode . flyspell-mode)
    :config
    ;; Additional optional configuration for org-mode
    (setq org-startup-folded 'overview))
#+end_src
*** org-babel
#+begin_src emacs-lisp
  (use-package org-babel
    :no-require
    :config
    (org-babel-do-load-languages 'org-babel-load-languages '((js      . t)
                                                             (python  . t)
                                                             (haskell . t)
                                                             (java    . t))))
#+end_src
